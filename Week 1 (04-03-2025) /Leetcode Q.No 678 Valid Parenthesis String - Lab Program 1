Week - 1 (04-03-2025)
Leetcode
Q.No 678 Valid Parenthesis String

Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.
The following rules define a valid string:
Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".
Example 1:
Input: s = "()"
Output: true
Example 2:
Input: s = "(*)"
Output: true
Example 3:
Input: s = "(*))"
Output: true
Constraints:
1 <= s.length <= 100
s[i] is '(', ')' or '*'.


Program -

#include <stdio.h>
#include <stdbool.h>



bool checkValidString(char *s) {
    int leftStack[100];  
    int rightStack[100]; 
    int leftTop = -1, rightTop = -1;


    for (int i = 0; s[i] != '\0'; i++) {
        if (s[i] == '(') {
            leftStack[++leftTop] = i;
        } else if (s[i] == ')') {
            if (leftTop != -1) {
                leftTop--;  
            } else if (rightTop != -1) {
                rightTop--; 
            } else {
                return false;
            }
        } else if (s[i] == '*') {
            rightStack[++rightTop] = i;
        }
    }

    
    while (leftTop != -1 && rightTop != -1) {
        if (leftStack[leftTop] < rightStack[rightTop]) {
            leftTop--;
            rightTop--;
        } else {
            return false;
        }
    }

    return leftTop == -1;
}
