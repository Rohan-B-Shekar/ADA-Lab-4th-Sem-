Leetcode Q.No 1859 Sorting the Sentence 


Program -
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

typedef struct {
    char *word;
    int position;
} WordInfo;

int getPosition(const char *word) {
    int len = strlen(word);
    int position = 0;
    int multiplier = 1;
    for (int i = len - 1; i >= 0; i--) {
        if (isdigit(word[i])) {
            position += (word[i] - '0') * multiplier;
            multiplier *= 10;
        } else {
            break;
        }
    }
    return position;
}

int compareWords(const void *a, const void *b) {
    WordInfo *wordA = (WordInfo *)a;
    WordInfo *wordB = (WordInfo *)b;
    return (wordA->position - wordB->position);
}

void removeDigits(char *word) {
    int len = strlen(word);
    int i = len - 1;
    while (i >= 0 && isdigit(word[i])) {
        i--;
    }
    word[i + 1] = '\0';
}

char *sortSentence(char *s) {
    int wordCount = 1;
    for (int i = 0; s[i] != '\0'; i++) {
        if (s[i] == ' ') {
            wordCount++;
        }
    }

    WordInfo *words = (WordInfo *)malloc(wordCount * sizeof(WordInfo));
    if (words == NULL) {
        perror("Memory allocation failed");
        return NULL;
    }

    char *token;
    char *rest = s;
    int index = 0;

    while ((token = strtok_r(rest, " ", &rest)) != NULL) {
        words[index].word = strdup(token);
        if (words[index].word == NULL) {
            perror("Memory allocation failed");
            for (int i = 0; i < index; i++) {
                free(words[i].word);
            }
            free(words);
            return NULL;
        }
        words[index].position = getPosition(token);
        index++;
    }

    qsort(words, wordCount, sizeof(WordInfo), compareWords);

    int sortedLength = 0;
    for (int i = 0; i < wordCount; i++) {
        removeDigits(words[i].word);
        sortedLength += strlen(words[i].word);
        if (i < wordCount - 1) {
            sortedLength++;
        }
    }
    sortedLength++;

    char *sortedSentence = (char *)malloc(sortedLength * sizeof(char));
    if (sortedSentence == NULL) {
        perror("Memory allocation failed");
        for (int i = 0; i < wordCount; i++) {
            free(words[i].word);
        }
        free(words);
        return NULL;
    }
    sortedSentence[0] = '\0';

    for (int i = 0; i < wordCount; i++) {
        strcat(sortedSentence, words[i].word);
        if (i < wordCount - 1) {
            strcat(sortedSentence, " ");
        }
        free(words[i].word);
    }

    free(words);
    return sortedSentence;
}
